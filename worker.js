(function () {
'use strict';

const TICK_RATE = 120; //hz
const TIME_PER_TICK = 1 / TICK_RATE * 1000; // milliseconds

let timestamp = 0;
let sharedBuffer = null;
let sharedBufferView = null;

async function tick(dt) {
  timestamp += dt;
  Atomics.store(sharedBufferView, 0, timestamp);
}

async function sleep(duration) {
  return new Promise(resolve => setTimeout(resolve, duration));
}

let PAUSE = false;

async function loop() {
  let lastFrameTime = performance.now();
  while(true) {
    if(PAUSE) {
      return;
    }
    const frameStartTime = performance.now();
    await tick(frameStartTime - lastFrameTime);
    lastFrameTime = performance.now();
    const frameDuration = lastFrameTime - frameStartTime;
    await sleep(TIME_PER_TICK - frameDuration);
  }
}

function initSharedBuffer(buffer) {
  sharedBuffer = buffer;
  sharedBufferView = new Uint32Array(sharedBuffer);
}

self.addEventListener("message", async function(event) {
  let data = event.data;
  if(data.type === "start") {
    initSharedBuffer(data.buffer);
    setTimeout(loop);
  }
  if(data.type === "simulate") {
    PAUSE = true;
    const numberOfTicks = data.duration / TIME_PER_TICK;
    const tickCount = Math.floor(numberOfTicks);
    const tickRemainder = (numberOfTicks - tickCount) * TIME_PER_TICK;

    for(let i = 0; i < tickCount; i++) {
      await tick(TIME_PER_TICK);
    }
    if(tickRemainder) {
      await tick(tickRemainder);
    }

    postMessage({
      type: "simulateEnd",
    });
    PAUSE = false;
    setTimeout(loop);
  }
});

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9tbnQvYy9Vc2Vycy90b20vcHJvamVjdHMvZm9ydGhlYmlyZHMvc3JjL3dvcmtlci5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVElDS19SQVRFID0gMTIwOyAvL2h6XHJcbmNvbnN0IFRJTUVfUEVSX1RJQ0sgPSAxIC8gVElDS19SQVRFICogMTAwMDsgLy8gbWlsbGlzZWNvbmRzXHJcblxyXG5sZXQgdGltZXN0YW1wID0gMDtcclxubGV0IHNoYXJlZEJ1ZmZlciA9IG51bGw7XHJcbmxldCBzaGFyZWRCdWZmZXJWaWV3ID0gbnVsbDtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHRpY2soZHQpIHtcclxuICB0aW1lc3RhbXAgKz0gZHQ7XHJcbiAgQXRvbWljcy5zdG9yZShzaGFyZWRCdWZmZXJWaWV3LCAwLCB0aW1lc3RhbXApO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBzbGVlcChkdXJhdGlvbikge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZHVyYXRpb24pKTtcclxufVxyXG5cclxubGV0IFBBVVNFID0gZmFsc2U7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBsb29wKCkge1xyXG4gIGxldCBsYXN0RnJhbWVUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgd2hpbGUodHJ1ZSkge1xyXG4gICAgaWYoUEFVU0UpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZnJhbWVTdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgIGF3YWl0IHRpY2soZnJhbWVTdGFydFRpbWUgLSBsYXN0RnJhbWVUaW1lKTtcclxuICAgIGxhc3RGcmFtZVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgIGNvbnN0IGZyYW1lRHVyYXRpb24gPSBsYXN0RnJhbWVUaW1lIC0gZnJhbWVTdGFydFRpbWU7XHJcbiAgICBhd2FpdCBzbGVlcChUSU1FX1BFUl9USUNLIC0gZnJhbWVEdXJhdGlvbik7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0U2hhcmVkQnVmZmVyKGJ1ZmZlcikge1xyXG4gIHNoYXJlZEJ1ZmZlciA9IGJ1ZmZlcjtcclxuICBzaGFyZWRCdWZmZXJWaWV3ID0gbmV3IFVpbnQzMkFycmF5KHNoYXJlZEJ1ZmZlcik7XHJcbn1cclxuXHJcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgYXN5bmMgZnVuY3Rpb24oZXZlbnQpIHtcclxuICBsZXQgZGF0YSA9IGV2ZW50LmRhdGE7XHJcbiAgaWYoZGF0YS50eXBlID09PSBcInN0YXJ0XCIpIHtcclxuICAgIGluaXRTaGFyZWRCdWZmZXIoZGF0YS5idWZmZXIpO1xyXG4gICAgc2V0VGltZW91dChsb29wKTtcclxuICB9XHJcbiAgaWYoZGF0YS50eXBlID09PSBcInNpbXVsYXRlXCIpIHtcclxuICAgIFBBVVNFID0gdHJ1ZTtcclxuICAgIGNvbnN0IG51bWJlck9mVGlja3MgPSBkYXRhLmR1cmF0aW9uIC8gVElNRV9QRVJfVElDSztcclxuICAgIGNvbnN0IHRpY2tDb3VudCA9IE1hdGguZmxvb3IobnVtYmVyT2ZUaWNrcyk7XHJcbiAgICBjb25zdCB0aWNrUmVtYWluZGVyID0gKG51bWJlck9mVGlja3MgLSB0aWNrQ291bnQpICogVElNRV9QRVJfVElDSztcclxuXHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGlja0NvdW50OyBpKyspIHtcclxuICAgICAgYXdhaXQgdGljayhUSU1FX1BFUl9USUNLKTtcclxuICAgIH1cclxuICAgIGlmKHRpY2tSZW1haW5kZXIpIHtcclxuICAgICAgYXdhaXQgdGljayh0aWNrUmVtYWluZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6IFwic2ltdWxhdGVFbmRcIixcclxuICAgIH0pO1xyXG4gICAgUEFVU0UgPSBmYWxzZTtcclxuICAgIHNldFRpbWVvdXQobG9vcCk7XHJc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