(function () {
'use strict';

const TICK_RATE = 120; //hz
const TIME_PER_TICK = 1 / TICK_RATE * 1000; // milliseconds

let timestamp = 0;

async function tick(dt) {
  timestamp += dt;
  let timestampBuffer = new Uint16Array(1);
  timestampBuffer[0] = timestamp;
  postMessage(timestampBuffer);
}

async function sleep(duration) {
  return new Promise(resolve => setTimeout(resolve, duration));
}

let PAUSE = false;

async function loop() {
  let lastFrameTime = performance.now();
  while(true) {
    if(PAUSE) {
      return;
    }
    const frameStartTime = performance.now();
    await tick(frameStartTime - lastFrameTime);
    lastFrameTime = performance.now();
    const frameDuration = lastFrameTime - frameStartTime;
    await sleep(TIME_PER_TICK - frameDuration);
  }
}

self.addEventListener("message", async function(event) {
  let data = event.data;
  if(data.type === "start") {
    setTimeout(loop);
  }
  if(data.type === "simulate") {
    PAUSE = true;
    const numberOfTicks = data.duration / TIME_PER_TICK;
    const tickCount = Math.floor(numberOfTicks);
    const tickRemainder = (numberOfTicks - tickCount) * TIME_PER_TICK;

    for(let i = 0; i < tickCount; i++) {
      await tick(TIME_PER_TICK);
    }
    if(tickRemainder) {
      await tick(tickRemainder);
    }

    postMessage({
      type: "simulateEnd",
    });
    PAUSE = false;
    setTimeout(loop);
  }
});

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9tbnQvYy9Vc2Vycy90b20vcHJvamVjdHMvZm9ydGhlYmlyZHMvc3JjL3dvcmtlci5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVElDS19SQVRFID0gMTIwOyAvL2h6XHJcbmNvbnN0IFRJTUVfUEVSX1RJQ0sgPSAxIC8gVElDS19SQVRFICogMTAwMDsgLy8gbWlsbGlzZWNvbmRzXHJcblxyXG5sZXQgdGltZXN0YW1wID0gMDtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHRpY2soZHQpIHtcclxuICB0aW1lc3RhbXAgKz0gZHQ7XHJcbiAgbGV0IHRpbWVzdGFtcEJ1ZmZlciA9IG5ldyBVaW50MTZBcnJheSgxKTtcclxuICB0aW1lc3RhbXBCdWZmZXJbMF0gPSB0aW1lc3RhbXA7XHJcbiAgcG9zdE1lc3NhZ2UodGltZXN0YW1wQnVmZmVyKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gc2xlZXAoZHVyYXRpb24pIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGR1cmF0aW9uKSk7XHJcbn1cclxuXHJcbmxldCBQQVVTRSA9IGZhbHNlO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gbG9vcCgpIHtcclxuICBsZXQgbGFzdEZyYW1lVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gIHdoaWxlKHRydWUpIHtcclxuICAgIGlmKFBBVVNFKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGZyYW1lU3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICBhd2FpdCB0aWNrKGZyYW1lU3RhcnRUaW1lIC0gbGFzdEZyYW1lVGltZSk7XHJcbiAgICBsYXN0RnJhbWVUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICBjb25zdCBmcmFtZUR1cmF0aW9uID0gbGFzdEZyYW1lVGltZSAtIGZyYW1lU3RhcnRUaW1lO1xyXG4gICAgYXdhaXQgc2xlZXAoVElNRV9QRVJfVElDSyAtIGZyYW1lRHVyYXRpb24pO1xyXG4gIH1cclxufVxyXG5cclxuc2VsZi5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBhc3luYyBmdW5jdGlvbihldmVudCkge1xyXG4gIGxldCBkYXRhID0gZXZlbnQuZGF0YTtcclxuICBpZihkYXRhLnR5cGUgPT09IFwic3RhcnRcIikge1xyXG4gICAgc2V0VGltZW91dChsb29wKTtcclxuICB9XHJcbiAgaWYoZGF0YS50eXBlID09PSBcInNpbXVsYXRlXCIpIHtcclxuICAgIFBBVVNFID0gdHJ1ZTtcclxuICAgIGNvbnN0IG51bWJlck9mVGlja3MgPSBkYXRhLmR1cmF0aW9uIC8gVElNRV9QRVJfVElDSztcclxuICAgIGNvbnN0IHRpY2tDb3VudCA9IE1hdGguZmxvb3IobnVtYmVyT2ZUaWNrcyk7XHJcbiAgICBjb25zdCB0aWNrUmVtYWluZGVyID0gKG51bWJlck9mVGlja3MgLSB0aWNrQ291bnQpICogVElNRV9QRVJfVElDSztcclxuXHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGlja0NvdW50OyBpKyspIHtcclxuICAgICAgYXdhaXQgdGljayhUSU1FX1BFUl9USUNLKTtcclxuICAgIH1cclxuICAgIGlmKHRpY2tSZW1haW5kZXIpIHtcclxuICAgICAgYXdhaXQgdGljayh0aWNrUmVtYWluZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6IFwic2ltdWxhdGVFbmRcIixcclxuICAgIH0pO1xyXG4gICAgUEFVU0UgPSBmYWxzZTtcclxuICAgIHNldFRpbWVvdXQobG9vcCk7XHJcbiAgfVxyXG59KTsiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDO0FBQ3RCLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDOztBQUUzQyxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7O0FBRWxCLGVBQWUsSUFBSSxDQUFDLEVBQUUsRUFBRTtFQUN0QixTQUFTLElBQUksRUFBRSxDQUFDO0VBQ2hCLElBQUksZUFBZSxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3pDLGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7RUFDL0IsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0NBQzlCOztBQUVELGVBQWUsS0FBSyxDQUFDLFFBQVEsRUFBRTtFQUM3QixPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7Q0FDOUQ7O0FBRUQsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDOztBQUVsQixlQUFlLElBQUksR0FBRztFQUNwQixJQUFJLGFBQWEsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7RUFDdEMsTUFBTSxJQUFJLEVBQUU7SUFDVixHQUFHLEtBQUssRUFBRTtNQUNSLE9BQU87S0FDUjtJQUNELE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN6QyxNQUFNLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDLENBQUM7SUFDM0MsYUFBYSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNsQyxNQUFNLGFBQWEsR0FBRyxhQUFhLEdBQUcsY0FBYyxDQUFDO0lBQ3JELE1BQU0sS0FBSyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUMsQ0FBQztHQUM1QztDQUNGOztBQUVELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsZUFBZSxLQUFLLEVBQUU7RUFDckQsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztFQUN0QixHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO0lBQ3hCLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNsQjtFQUNELEdBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7SUFDM0IsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNiLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO0lBQ3BELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDNUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxhQUFhLEdBQUcsU0FBUyxJQUFJLGFBQWEsQ0FBQzs7SUFFbEUsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtNQUNqQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUMzQjtJQUNELEdBQUcsYUFBYSxFQUFFO01BQ2hCLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQzNCOztJQUVELFdBQVcsQ0FBQztNQUNWLElBQUksRUFBRSxhQUFhO0tBQ3BCLENBQUMsQ0FBQztJQUNILEtBQUssR0FBRyxLQUFLLENBQUM7SUFDZCxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDbEI7Q0FDRixDQUFDOzs7OyJ9