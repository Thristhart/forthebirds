(function () {
'use strict';

// these are for convenience and readability
const UNITS = {};
UNITS.SECONDS = 1000, // milliseconds
UNITS.MINUTES = 60 * UNITS.SECONDS;
UNITS.HOURS = 60 * UNITS.SECONDS;

const CONSTANTS = {
  DAY_LENGTH: 30 * UNITS.SECONDS,

  UNITS,
};

const TICK_RATE = 120; //hz
const TIME_PER_TICK = 1 / TICK_RATE * 1000; // milliseconds

let timestamp = CONSTANTS.DAY_LENGTH / 24 * 6; // start at 6am
let sharedBuffer = null;
let sharedBufferView = null;

async function tick(dt) {
  timestamp += dt;
  Atomics.store(sharedBufferView, 0, timestamp);
}

async function sleep(duration) {
  return new Promise(resolve => setTimeout(resolve, duration));
}

let PAUSE = false;

async function loop() {
  let lastFrameTime = performance.now();
  while(true) {
    if(PAUSE) {
      return;
    }
    const frameStartTime = performance.now();
    await tick(frameStartTime - lastFrameTime);
    lastFrameTime = performance.now();
    const frameDuration = lastFrameTime - frameStartTime;
    await sleep(TIME_PER_TICK - frameDuration);
  }
}

function initSharedBuffer(buffer) {
  sharedBuffer = buffer;
  sharedBufferView = new Uint32Array(sharedBuffer);
}

self.addEventListener("message", async function(event) {
  let data = event.data;
  if(data.type === "start") {
    initSharedBuffer(data.buffer);
    setTimeout(loop);
  }
  if(data.type === "simulate") {
    PAUSE = true;
    const numberOfTicks = data.duration / TIME_PER_TICK;
    const tickCount = Math.floor(numberOfTicks);
    const tickRemainder = (numberOfTicks - tickCount) * TIME_PER_TICK;

    for(let i = 0; i < tickCount; i++) {
      await tick(TIME_PER_TICK);
    }
    if(tickRemainder) {
      await tick(tickRemainder);
    }

    postMessage({
      type: "simulateEnd",
    });
    PAUSE = false;
    setTimeout(loop);
  }
});

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9tbnQvYy9Vc2Vycy90b20vcHJvamVjdHMvZm9ydGhlYmlyZHMvc3JjL2NvbnN0YW50cy5tanMiLCIvbW50L2MvVXNlcnMvdG9tL3Byb2plY3RzL2ZvcnRoZWJpcmRzL3NyYy93b3JrZXIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRoZXNlIGFyZSBmb3IgY29udmVuaWVuY2UgYW5kIHJlYWRhYmlsaXR5XHJcbmNvbnN0IFVOSVRTID0ge307XHJcblVOSVRTLlNFQ09ORFMgPSAxMDAwLCAvLyBtaWxsaXNlY29uZHNcclxuVU5JVFMuTUlOVVRFUyA9IDYwICogVU5JVFMuU0VDT05EUztcclxuVU5JVFMuSE9VUlMgPSA2MCAqIFVOSVRTLlNFQ09ORFM7XHJcblxyXG5jb25zdCBDT05TVEFOVFMgPSB7XHJcbiAgREFZX0xFTkdUSDogMzAgKiBVTklUUy5TRUNPTkRTLFxyXG5cclxuICBVTklUUyxcclxufTtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBDT05TVEFOVFM7IiwiY29uc3QgVElDS19SQVRFID0gMTIwOyAvL2h6XHJcbmNvbnN0IFRJTUVfUEVSX1RJQ0sgPSAxIC8gVElDS19SQVRFICogMTAwMDsgLy8gbWlsbGlzZWNvbmRzXHJcblxyXG5pbXBvcnQgQ09OU1RBTlRTIGZyb20gXCIuL2NvbnN0YW50cy5tanNcIjtcclxuXHJcbmxldCB0aW1lc3RhbXAgPSBDT05TVEFOVFMuREFZX0xFTkdUSCAvIDI0ICogNjsgLy8gc3RhcnQgYXQgNmFtXHJcbmxldCBzaGFyZWRCdWZmZXIgPSBudWxsO1xyXG5sZXQgc2hhcmVkQnVmZmVyVmlldyA9IG51bGw7XHJcblxyXG5hc3luYyBmdW5jdGlvbiB0aWNrKGR0KSB7XHJcbiAgdGltZXN0YW1wICs9IGR0O1xyXG4gIEF0b21pY3Muc3RvcmUoc2hhcmVkQnVmZmVyVmlldywgMCwgdGltZXN0YW1wKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gc2xlZXAoZHVyYXRpb24pIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGR1cmF0aW9uKSk7XHJcbn1cclxuXHJcbmxldCBQQVVTRSA9IGZhbHNlO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gbG9vcCgpIHtcclxuICBsZXQgbGFzdEZyYW1lVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gIHdoaWxlKHRydWUpIHtcclxuICAgIGlmKFBBVVNFKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGZyYW1lU3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICBhd2FpdCB0aWNrKGZyYW1lU3RhcnRUaW1lIC0gbGFzdEZyYW1lVGltZSk7XHJcbiAgICBsYXN0RnJhbWVUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICBjb25zdCBmcmFtZUR1cmF0aW9uID0gbGFzdEZyYW1lVGltZSAtIGZyYW1lU3RhcnRUaW1lO1xyXG4gICAgYXdhaXQgc2xlZXAoVElNRV9QRVJfVElDSyAtIGZyYW1lRHVyYXRpb24pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFNoYXJlZEJ1ZmZlcihidWZmZXIpIHtcclxuICBzaGFyZWRCdWZmZXIgPSBidWZmZXI7XHJcbiAgc2hhcmVkQnVmZmVyVmlldyA9IG5ldyBVaW50MzJBcnJheShzaGFyZWRCdWZmZXIpO1xyXG59XHJcblxyXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGFzeW5jIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgbGV0IGRhdGEgPSBldmVudC5kYXRhO1xyXG4gIGlmKGRhdGEudHlwZSA9PT0gXCJzdGFydFwiKSB7XHJcbiAgICBpbml0U2hhcmVkQnVmZmVyKGRhdGEuYnVmZmVyKTtcclxuICAgIHNldFRpbWVvdXQobG9vcCk7XHJcbiAgfVxyXG4gIGlmKGRhdGEudHlwZSA9PT0gXCJzaW11bGF0ZVwiKSB7XHJcbiAgICBQQVVTRSA9IHRydWU7XHJcbiAgICBjb25zdCBudW1iZXJPZlRpY2tzID0gZGF0YS5kdXJhdGlvbiAvIFRJTUVfUEVSX1RJQ0s7XHJcbiAgICBjb25zdCB0aWNrQ291bnQgPSBNYXRoLmZsb29yKG51bWJlck9mVGlja3MpO1xyXG4gICAgY29uc3QgdGlja1JlbWFpbmRlciA9IChudW1iZXJPZlRpY2tzIC0gdGlja0NvdW50KSAqIFRJTUVfUEVSX1RJQ0s7XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHRpY2tDb3VudDsgaSsrKSB7XHJcbiAgICAgIGF3YWl0IHRpY2soVElNRV9QRVJfVElDSyk7XHJcbiAgICB9XHJcbiAgICBpZih0aWNrUmVtYWluZGVyKSB7XHJcbiAgICAgIGF3YWl0IHRpY2sodGlja1JlbWFpbmRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdE1lc3NhZ2Uoe1xyXG4gICAgICB0eXBlOiBcInNpbXVsYXRlRW5kXCIsXHJcbiAgICB9KTtcclxuICAgIFBBVVNFID0gZmFsc2U7XHJcbiAgICBzZXRUaW1lb3V0KGxvb3ApO1xyXG4gIH1cclxufSk7Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0EsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSTtBQUNwQixLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQ25DLEtBQUssQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7O0FBRWpDLE1BQU0sU0FBUyxHQUFHO0VBQ2hCLFVBQVUsRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU87O0VBRTlCLEtBQUs7Q0FDTjs7QUNWRCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUM7QUFDdEIsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUM7O0FBRTNDLEFBRUEsSUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUcsQ0FB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